#!/usr/bin/env python3
#encoding: utf-8

import argparse
import geopandas


import crschem.crossroad_schematization as cs

# a trick to avoid the creation of files given as parameters
class FileOpener(argparse.FileType):
    # delayed FileType;
    # sample use:
    # with args.input.open() as f: f.read()
    def __call__(self, string):
        # optionally test string
        self.filename = string
        return self
    def open(self):
        return super(FileOpener,self).__call__(self.filename)
    file =  property(open, None, None, 'open file property')



parser = argparse.ArgumentParser(description="Generate a schematized representation of a given crossroad.")
parser.add_argument('-i', '--input', help='input geojson file generated by crossroad describer', type=FileOpener('r'), required=True)
parser.add_argument('-d', '--display', help='display a preview of the crossroad schematization', action='store_true')
parser.add_argument('-o', '--output', help='output file (supported format: svg, geojson)', type=FileOpener('w'))


args = parser.parse_args()



# load geojson data from Jérémy's tool
print("Loading input geojson (" + args.input.filename + ")")
cr_input = geopandas.read_file(args.input.filename)

crschem = cs.CrossroadSchematization(cr_input)

if args.display:
    crschem.show()

if args.output:
    if len(args.output.filename) < 4:
        "Cannot deduce required format with small file names"
        
if args.output:
    if args.output.filename.endswith(".svg"):
        print("Exporting as svg:", args.output.filename)
        crschem.toSvg(args.output.filename)
    elif args.output.filename.endswith(".geojson"):
        print("Exporting as geojson:", args.output.filename)
        crschem.toGeojson(args.output.filename)
    else:
        print("Unknown output format")

